<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="1280" height="720" frameRate="30" backgroundColor="#000000" creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.easing.Quad;
			import com.greensock.events.LoaderEvent;
			import com.greensock.loading.XMLLoader;
			import com.rgs.market.calendar.DataRetriever;
			import com.rgs.market.calendar.DateChecker;
			import com.rgs.market.calendar.ErrorData;
			import com.rgs.market.calendar.PoemData;
			import com.rgs.market.calendar.RemoteSettings;
			import com.rgs.market.debug.DateBug;
			import com.rgs.market.debug.KeyboardManager;
			import com.rgs.market.vis.Bubble;
			import com.rgs.market.vis.BubbleManager;
			import com.rgs.market.vis.VideoLooper;
			import com.rgs.utils.monster.Monster;
			
			import flash.display.LoaderInfo;
			
			import mx.core.FlexGlobals;
			
			import nl.demonsters.debugger.MonsterDebugger;
			
			private var settingsLoader : XMLLoader;
			private var settings : XML;
			
			private var remote : RemoteSettings;
			
			private var todaysPoem : String;
			private var bm : BubbleManager;
			private var debugger : MonsterDebugger;
			private var dateBug : DateBug;
			
			private var fallbackPoem : PoemData;
			
			private var dateChecker : DateChecker;
			
			private var dataRetriever : DataRetriever;
			
			private var videoLooper : VideoLooper;
			
			private var startDate : Date;
			
			private var loadTimer : Timer;
			private var lastDay : Number;
			private var nowDay : Number;
			
			private var errorCount : int = 0;
			
			private function init():void
			{
				debugger = new MonsterDebugger(this);
				
				Monster.enableAllLevels();
				Monster.clear();
			
				settingsLoader = new XMLLoader("settings.xml", { onComplete: onSettingsLoaded });
				settingsLoader.load();
			}
			
			private function onSettingsLoaded(e:LoaderEvent):void
			{
				settings = settingsLoader.content;
				
				fallbackPoem = new PoemData();
				fallbackPoem.poem = settings.fallback.local.poem;
				fallbackPoem.author = settings.fallback.local.author;
				
				if (stage) { onAddedToStage(); } else { addEventListener(Event.ADDED_TO_STAGE, onAddedToStage); }
				
				dateChecker = new DateChecker();
				dateChecker.dateChangedSignal.add(onDateChanged);
				
				dataRetriever = new DataRetriever(settings.data);
				dataRetriever.loadedSignal.addOnce(onRemoteDateLoaded);
				dataRetriever.errorSignal.addOnce(onRemoteDateError);
				dataRetriever.getDataForRemoteDate(new Date(settings.data.remoteSettingsDate.toString()));
						
			}
			
			private function onRemoteDateError(errorData:ErrorData):void
			{
				Monster.error(this, "remoteDateError!");
				Monster.error(this, errorData);
				
				addHandlersToDataRetriever();
				
				startDate = dateFromString(settings.data.startDate.toString());
				dateChecker.start(startDate);
			}
			
			private function onRemoteDateLoaded(d:PoemData):void
			{
				var remoteDateString:String = d.poem.toLowerCase();
				
				Monster.info(this, "got remote date string");
				Monster.info(this, remoteDateString);
				
				addHandlersToDataRetriever();
				
				startDate = dateFromString(remoteDateString);
				dateChecker.start(startDate);		
			}
			
			private function addHandlersToDataRetriever():void
			{
				dataRetriever.errorSignal.removeAll();
				dataRetriever.loadedSignal.removeAll();
				dataRetriever.loadedSignal.add(onDataLoaded);
				dataRetriever.errorSignal.add(onDataError);
			}
			
			
			
			private function onDataLoaded(poemData:PoemData):void
			{
				Monster.info(this, "got data: ");
				Monster.info(this, poemData);
//				bm.poemText = settings.poem.prefix.toString() + poemData.poem;
				bm.poemData = poemData;
			}
			
			private function onDataError(errorData:ErrorData):void
			{
				Monster.error(this, "ERRORRRRR");
				Monster.error(this, errorData);
				bm.poemData = fallbackPoem;
			}
			
			private function onDateChanged(now:Date):void
			{
				Monster.info(this, "date changed: now = " + now);
				dateBug.text = now;
				videoLooper.load(now);
				dataRetriever.getDataForLocalDate(now);
			}
			
			private function dateFromString(s:String):Date
			{
				var todayDate:Date = new Date();
				todayDate.seconds = 0;
				todayDate.minutes = 0;
				todayDate.hours = 0;
				todayDate.milliseconds = 0;
				
				if (s.toLowerCase() == "today") { return todayDate; }
				else
				{
					var d:Date = new Date(s);
					if (d.toString() == "Invalid Date") { return todayDate; }
					else { return d; }
				}
			}
		
			
			/* *****************************************************************************
			*
			*               STAGE / RESIZE STUFF
			*
			*/
			
			private function onAddedToStage(e:Event=null):void
			{
				removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);				
				this.stage.addEventListener(Event.RESIZE, onResize);
				setupComponents();
			}
			
			private function setupComponents():void
			{
				Monster.info(this, "adding components to stage...");
				
				videoLooper = new VideoLooper(settings.videos);
				this.stage.addChild(videoLooper);
				
				dateBug = new DateBug();
				this.stage.addChild(dateBug);
				
				bm = new BubbleManager(settings.timing);
				this.stage.addChild(bm);
				
				setupKeyboardManager();
			}
			
			private function onResize(e:Event):void
			{
				if (videoLooper) { videoLooper.resize(); }
				if (bm) { bm.resize(); }
				if (dateBug) { dateBug.resize(); }
			}
			
			/* *****************************************************************************
			*
			*               KEYBOARD STUFF
			*
			*/
			
			private function setupKeyboardManager():void
			{
				this.stage.addChild(KeyboardManager.getInstance());
//				KeyboardManager.getInstance().restartSignal.add(onRestartKey);
				KeyboardManager.getInstance().loadSignal.add(onLoadKey);
				KeyboardManager.getInstance().previousSignal.add(onPreviousKey);
				KeyboardManager.getInstance().nextSignal.add(onNextKey);

			}
			
//			private function onRestartKey():void
//			{
//				Monster.info(this, "restarting show");
//				bm.showEnded.addOnce( function():void
//				{
//					bm.startShow();
//				});
//				bm.endShow();
//			}
//			
//			private function onLoadKey():void
//			{
//				Monster.info(this, "got load key");
//				
//				bm.showEnded.addOnce(function():void { loadPoem(poemDate); });
//				bm.endShow();
//			}
			
			private function onLoadKey():void
			{
				dateChecker.sendTodayAgain();
			}
			
			private function onNextKey():void
			{
				dateChecker.incrementFakeDate();
			}
			
			private function onPreviousKey():void
			{
				dateChecker.decrementFakeDate();
			}
//			
//			private function onNextKey():void
//			{
//				Monster.info(this, "got next key");
//				
//				bm.showEnded.addOnce
//				(
//					function():void
//					{
//						poemDate.date ++;
//						loadPoem(poemDate);
//					}
//				);
//				bm.endShow();
//			}
//			
//			private function onPreviousKey():void
//			{
//				Monster.info(this, "got previous key");
//				bm.showEnded.addOnce
//					(
//						function():void
//						{
//							poemDate.date --;
//							loadPoem(poemDate);
//						}
//					);
//				bm.endShow();
//			}
			
			// *****************************************************************************
		]]>
	</fx:Script>
</s:Application>
